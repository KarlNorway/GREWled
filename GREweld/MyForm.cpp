#include "MyForm.h"
#include <fstream>
#include <math.h>
#include <string>
#include <atlstr.h>
#include <Windows.h>
#include <stdio.h>
#include <iostream>

using namespace System;
using namespace System::Windows::Forms;
using namespace GREweld;
using namespace System::IO;


[STAThread]
int main()
{
	Application::EnableVisualStyles();
	Application::SetCompatibleTextRenderingDefault(false);
	GREweld::MyForm myForm;        //NameOfProject::NameOfForm instanceOfForm;
	Application::Run(%myForm);
	

	return 0;
}

float_t calculateYdist(float_t celldCC) {
	float_t calculatedYdist = sqrt((celldCC*celldCC) - ((celldCC / 2)*(celldCC / 2)));
	return calculatedYdist;
}

int writeHeader(std::string fName) {

	std::ofstream GCodeFile;
	GCodeFile.open(fName + ".gcode");
	if (GCodeFile.is_open())
	{
		
		GCodeFile << ";FLAVOR: Reprap / Merlin" << std::endl;
		GCodeFile << ";Generated by Cell Spot welder automation SW" << std::endl;
		GCodeFile << ";X/Y tabel controller is based on Marlin FW with mod to M240 for welding" << std::endl;
		GCodeFile << ";Author: Karl Krisian Markman, Grenland Energy" << std::endl;
		GCodeFile << " " << std::endl;
		GCodeFile << "G28 ; Home" << std::endl;
		GCodeFile << ";This file is set up to dwell before and after every spotweld. " << std::endl;
		GCodeFile << "" << std::endl;
		GCodeFile.close();

		return 1;
	}
	else {
		MessageBox::Show("File not opened ", "Notification", MessageBoxButtons::OKCancel, MessageBoxIcon::Asterisk);
		return 0;
	}
}

int writeToFile(std::string fName, float Xpos, float Ypos) {

	std::ofstream GCodeFile;
	GCodeFile.open(fName + ".gcode", std::ios_base::app);
	if (GCodeFile.is_open())
	{
		float XposWeld = Xpos + 2;
		float YposWeld = Ypos + 2;
		GCodeFile << "G1 X" << Xpos << " Y" << Ypos << std::endl;
		GCodeFile << "G4 P20" << std::endl;
		GCodeFile << "M240" << std::endl;
		GCodeFile << "G4 P200" << std::endl;
		GCodeFile << "G1 X" << XposWeld << " Y" << Ypos << " E1" << std::endl;
		GCodeFile << "G4 P20" << std::endl;
		GCodeFile << "M240" << std::endl;
		GCodeFile << "G4 P200" << std::endl;

		GCodeFile.close();
		return 1;
	}
	else {
		MessageBox::Show("File not opened ", "Notification", MessageBoxButtons::OKCancel, MessageBoxIcon::Asterisk);
		return 0;
	}
}


int generateGCode(std::string fName, float_t calcYdist, int cPerRow, int cRow, float_t cellCC, float initX, float initY, bool square) {

	int fileOK = writeHeader(fName);
	if (fileOK == 1) {
		float Xpos, Ypos;
		bool offSet = false;
		Xpos = initX;
		Ypos = initY;
		bool left = true;
		cellCC -= 2;
		writeToFile(fName, Xpos, Ypos);
		for (int y = 0; y < cRow ; y++) {
			if (left) {
				if (offSet) {
					for (int x = 0; x < cPerRow - 2; x++) {
						Xpos += cellCC;
						writeToFile(fName, Xpos, Ypos);
						offSet = false;
					}
				}
				else {
					for (int x = 0; x < cPerRow - 1; x++) {
						Xpos += cellCC;
						writeToFile(fName, Xpos, Ypos);
						if (!square) {
							offSet = true;
						}
					}
				}
			}
			else {
				if (offSet) {
					for (int x = 0; x < cPerRow - 2; x++) {
						Xpos = Xpos - cellCC;
						writeToFile(fName, Xpos, Ypos);
							offSet = false;
					}
				}
				else {
					for (int x = 0; x < cPerRow - 1; x++) {
						Xpos = Xpos - cellCC;
						writeToFile(fName, Xpos, Ypos);
						if (!square) {
							offSet = true;
						}
					}
				}
			}
			if (left) {
				if (offSet) {
					Xpos = Xpos - (cellCC / 2);
				}
				else {
				}

				left = false;
			}
			else {
				if (offSet) {
					Xpos = initX + (cellCC / 2);
				}
				else {
					Xpos = initX;
				}

				left = true;
			}
			if (!square) {
				Ypos += calcYdist;
				writeToFile(fName, Xpos, Ypos);
			}
			else {
				Ypos += cellCC;
				writeToFile(fName, Xpos, Ypos);
			}
			}
	}
	else
	{
		return 0;
	}
	return 1;
}

System::Void GREweld::MyForm::btnGenerate_Click(System::Object ^ sender, System::EventArgs ^ e)
{
	using namespace System::Runtime::InteropServices;
	String^ strcPerRow = MyForm::txtCPerRow->Text;
	String^ strcRow = MyForm::txtCRow->Text;
	String^ strCellCC = MyForm::txtCellCC->Text;
	String^ strInitX = MyForm::txtInitX->Text;
	String^ strInitY = MyForm::txtInitY->Text;
	
	int cPerRow = (int)(Convert::ToInt16(strcPerRow));
	int cRow = (int)(Convert::ToInt16(strcRow));
	float cellCC = (float)(Convert::ToDouble(strCellCC));
	float initXPos = (float)(Convert::ToDouble(strInitX));
	float initYPos = (float)(Convert::ToDouble(strInitY));	

	std::string fName = (const char*)(Marshal::StringToHGlobalAnsi(MyForm::txtFname->Text)).ToPointer();
	
	float calcYdist = calculateYdist(cellCC);

	if (cPerRow != 0 && cRow != 0 && cellCC != 0)
	{	
		bool square;
		if (MyForm::rbtnSquare->Checked) {
			square = true;
		}
		else {
			square = false;
		}
				generateGCode( fName, calcYdist, cPerRow, cRow, cellCC, initXPos, initYPos, square);
		}
	else {
		MessageBox::Show("Missing values ", "Notification", MessageBoxButtons::OKCancel, MessageBoxIcon::Asterisk);
	}
}
